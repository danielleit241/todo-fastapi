services:
  postgres:
    container_name: postgres_fastapi
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fastapi-network

  pgweb:
    container_name: pgweb_fastapi
    image: sosedoff/pgweb:latest
    environment:
      PGWEB_DATABASE_URL: ${PGWEB_DATABASE_URL}
    ports:
      - "${PGWEB_PORT}:8081"
    depends_on:
      postgres:
        condition: service_healthy  
    networks:
      - fastapi-network
  
  fastapi:
    build: .
    container_name: fastapi_api
    command: uvicorn main:app --host 0.0.0.0 --port 8080
    ports:
      - "${PROJECT_PORT}:8000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
    depends_on:
      postgres:
        condition: service_healthy
      pgweb:
        condition: service_healthy
    healthcheck:
        test: ["CMD-SHELL", "curl -f http://localhost:8080/api/v1/health || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 5
    networks:
      - fastapi-network
      
volumes:
  postgres_data:

networks:
  fastapi-network: